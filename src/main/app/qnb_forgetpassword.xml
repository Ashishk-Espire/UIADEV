<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd">

	<spring:beans>
		<spring:bean name="forgetPasswordBean" class="com.uia.component.ForgetPasswordBean"
			scope="singleton" />
	</spring:beans>

	<flow name="qnb_checkUserDetails">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="${uia.http.basepath}/${http.path.qnb.validateuserdetails}"
			allowedMethods="POST" doc:name="HTTP" />
		<json:validate-schema schemaLocation="/JsonSchema/validateuserdetails.schema.json"
			doc:name="Validate JSON Schema" />
		<set-session-variable variableName="email"
			value="#[json:email_address]" doc:name="email" />
		<set-variable variableName="userDetailsFunction"
			value="{&quot;function&quot; : &quot;tia_mule.validate_user_details&quot;, &quot;args&quot; : #[payload]}"
			doc:name="userDetailsFunction" />

		<transactional action="ALWAYS_BEGIN" doc:name="Transactional">
			<db:stored-procedure config-ref="TIADB_Oracle_Configuration"
				doc:name="Database">
				<db:parameterized-query><![CDATA[{:fncResult = call APPS.apps_core.dispatch_clob(:inputJSON,'MULE')}]]></db:parameterized-query>
				<db:in-param name="inputJSON" type="VARCHAR"
					value="#[flowVars.userDetailsFunction]" />
				<db:out-param name="fncResult" type="CLOB" />
			</db:stored-procedure>
			<custom-transformer class="com.uia.transformer.ClobTransformer"
				doc:name="Java Transformer (oracle.sql.CLOB to String) " />
		</transactional>
		<json:object-to-json-transformer
			doc:name="Object to JSON" />
		<set-variable variableName="resultstatus" value="#[json:header/result_status]"
			doc:name="resultstatus" />
		<logger message="Going beyong validator The payload is #[payload]"
			level="INFO" doc:name="Logger" />
		<flow-ref name="qnb_checkUserDetailsSub_Flow" doc:name="qnb_checkUserDetailsSub_Flow" />
	</flow>

	<sub-flow name="qnb_checkUserDetailsSub_Flow">
		<choice doc:name="Choice">
			<when expression="#[flowVars.resultstatus == 'SUCCESS']">
				<set-variable variableName="validuserdetails"
					value="#[json:call_validate_user_details/Valid]" doc:name="validuserdetails" />
				<set-session-variable variableName="passwordtoken"
					value="#[java.util.UUID.randomUUID().toString()]" doc:name="passwordtoken" />
				<set-session-variable variableName="passwordtokentime"
					value="#[java.lang.System.currentTimeMillis()]" doc:name="passwordtokentime" />
				<invoke object-ref="forgetPasswordBean" method="populatePasswordTokenMap"
					methodArguments="#[sessionVars.passwordtoken],#[sessionVars.email]"
					methodArgumentTypes="java.lang.String,java.lang.String" doc:name="Invoke" />
				<dw:transform-message doc:name="Transform Message">
					<dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	"result_status":(upper payload.header.result_status),
	"valid" : payload.call_validate_user_details.Valid,
	"result_message":"User details are verified successfully!",
	"passwordtoken" :  sessionVars.passwordtoken
	
} when (upper payload.call_validate_user_details.Valid) == "1"
otherwise {
	"result_status":(upper payload.header.result_status),
	"valid" : payload.call_validate_user_details.Valid,
	"result_message":"Not a valid user details!"
}]]></dw:set-payload>
				</dw:transform-message>
				<json:object-to-json-transformer
					doc:name="Object to JSON" />
			</when>
			<otherwise>
				<set-payload value="#[payload]" mimeType="application/json"
					doc:name="Set Payload" />
			</otherwise>
		</choice>
	</sub-flow>
	<flow name="qnb_resetpasswordFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="${uia.http.basepath}/${http.path.qnb.resetpassword}"
			allowedMethods="POST" doc:name="HTTP" />

		<json:validate-schema schemaLocation="/JsonSchema/resetPasswordSchema.json"
			doc:name="Validate JSON Schema for resetPassword Policy" />
		<set-variable variableName="email" value="#[json:username]"
			doc:name="email" />
		<set-variable variableName="password" value="#[json:password]"
			doc:name="password" />

		<set-variable variableName="passwordToken" value="#[json:passwordtoken]"
			doc:name="passwordToken" />
		<set-payload
			value=" #[app.registry.forgetPasswordBean.validatePasswordToken(flowVars.passwordToken,flowVars.email)]"
			doc:name="Set Payload" />
		<set-variable variableName="tokenvalidationresult" value="#[json:result_status]"
			doc:name="tokenvalidationresult" />
        <flow-ref name="qnb_resetpasswordSub_Flow" doc:name="qnb_resetpasswordSub_Flow"/>


	</flow>
	<sub-flow name="qnb_resetpasswordSub_Flow">

		<choice doc:name="Choice">
			<when expression="#[flowVars.tokenvalidationresult == &quot;SUCCESS&quot;]">
				<scripting:component doc:name="Groovy">
					<scripting:script engine="Groovy"
						file="qnb_loginScript/SHA256.groovy">
						<property key="inputpassword" value="#[flowVars.password]" />
					</scripting:script>
				</scripting:component>
				<set-variable variableName="encryptedPassword" value="#[payload]"
					doc:name="encryptedPassword" />
				<set-variable variableName="resetpasswordfunction"
					value="{&quot;function&quot;: &quot;tia_mule.update_pwd&quot;, &quot;args&quot; :{&quot;email_address&quot; : &quot;#[flowVars.email]&quot;,&quot;hash&quot; : &quot;#[flowVars.encryptedPassword]&quot;}}"
					doc:name="resetpasswordfunction" />
				<logger
					message="The reset password function after groovy transformation #[flowVars.resetpasswordfunction]"
					level="INFO" doc:name="Logger" />
				<transactional action="ALWAYS_BEGIN" doc:name="Transactional">
					<db:stored-procedure config-ref="TIADB_Oracle_Configuration"
						doc:name="Database">
						<db:parameterized-query><![CDATA[{:fncResult = call APPS.apps_core.dispatch_clob(:inputJSON,'MULE')}]]></db:parameterized-query>
						<db:in-param name="inputJSON" type="VARCHAR"
							value="#[flowVars.resetpasswordfunction]" />
						<db:out-param name="fncResult" type="CLOB" />
					</db:stored-procedure>
					<custom-transformer class="com.uia.transformer.ClobTransformer"
						doc:name="Java Transformer (oracle.sql.CLOB to String) " />
					<set-payload value="#[payload]" mimeType="application/json"
						doc:name="Set Payload" />
				</transactional>
			</when>
			<otherwise>
				<set-payload value="#[payload]" doc:name="Set Payload" />
			</otherwise>
		</choice>

	</sub-flow>
</mule>
